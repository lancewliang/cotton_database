//+------------------------------------------------------------------+//|                                                 EventTrigger.mq4 |//|                        Copyright 2014, Shrek Xu and Lance Liang. |//|                                              http://www.mql5.com |//+------------------------------------------------------------------+#property copyright "Copyright 2014, Shrek Xu and Lance Liang."#property link      "http://www.mql5.com"#property version   "1.00"#property strict#include <sxu_test2dll.mqh> #include <sxu_stringlib.mqh> //--- input parametersextern double TakeProfit = 200;  //盈利目标点数extern double Lots = 0.1;        // 每单入场的手数extern double TrailingStop = 150; //追踪止损的点数extern double EventInteval = 1; // 事件时间间隔 1 hour， 这个时间之内只能有一单extern double MaxTradeHour = 2; // 一单最大时间, 必须满足 EventInteval<MaxTradeHourint lastActiveEvent = 0;//+------------------------------------------------------------------+//| Expert initialization function                                   |//+------------------------------------------------------------------+int OnInit()  {//---   Print("----OnInit----");   //---   return(INIT_SUCCEEDED);  }//+------------------------------------------------------------------+//| Expert deinitialization function                                 |//+------------------------------------------------------------------+void OnDeinit(const int reason)  {//---   Print("----OnDeinit----");  }    int start()  {   Print("----start----");   return 0;  }//+------------------------------------------------------------------+//| Expert tick function                                             |//+------------------------------------------------------------------+void OnTick()  {//---   int    cnt,ticket,total;   Print("----OnTick----");   if(TakeProfit<10)     {      Print("TakeProfit less than 10");      return;  // check TakeProfit     }     total=OrdersTotal();     if(total<1 || total>=1)     {      // no opened orders identified      if(AccountFreeMargin()<(1000*Lots)) // 这句诗判断保证金余量是否够下单，如果不够则直接返回，并不进行后续入场判断        {         Print("We have no money. Free Margin = ", AccountFreeMargin());         return;          }        //datetime d1=D'1980.07.19 12:30:27';      datetime curTime = TimeLocal();//TimeCurrent();      string dateStr = TimeYear(curTime) + "." + TimeMonth(curTime) + "." + TimeDay(curTime);      string timeStr = TimeHour(curTime) + ":" + TimeMinute(curTime);      Print("时间为:" + dateStr +" "+ timeStr);        int res = GetPlus(dateStr, timeStr);      Print("结果为:" + res);      int flag = res%10;      string resStr = IntegerToString(res);      datetime eventDateTime = StrToTime("2014."+StringSubstr(resStr, 1,2) + StringSubstr(resStr, 3,2) + " "+StringSubstr(resStr, 5,2)+":"+StringSubstr(resStr, 7,2));      string eventDateStr = TimeToStr(eventDateTime, TIME_DATE|TIME_MINUTES);      string eventDateStrTemp = eventDateStr;      StringReplace(eventDateStrTemp, ".","");      StringReplace(eventDateStrTemp, " ","");      StringReplace(eventDateStrTemp, ":","");      eventDateStrTemp = StringSubstr(eventDateStrTemp, 5, 6);      int eventDateInt = StringToInteger(eventDateStrTemp);            if(checkBuyTikcet(eventDateTime, eventDateInt)>0){         return;      }            // check for long position (BUY) possibility      if(flag == 2) {        // 入场         ticket = OrderSend(Symbol(),OP_BUY,Lots,Ask,3,0,Ask+TakeProfit*Point,"macd sample",eventDateInt,0,Green); //这是入场语句 记得一定要判断入场是否成功，因为很多服务器由于滑点或者服务器价格变动而不能入场成功，所以，要判断入场不成功后作出提示。ticket就是定单入场是否成功的标记。         if(ticket>0){ //大于0说明入场成功           if(OrderSelect(ticket,SELECT_BY_TICKET,MODE_TRADES)){               Print("BUY order opened : ",OrderOpenPrice());               lastActiveEvent = eventDateInt;           } else{               Print("Error opening BUY order : ",GetLastError()); //入场不成功，输出不成功的系统原因。               return; //这里为什麽使用了返回呢。因为一种情况是入场成功，那末直接返回等待下一个价格到来的时候再执行start函数，另一种情况是入场不成功，则返回也是等待下一个价格到来的时候在此执行入场操作。           }         }      } else if(flag == 0) {         // 观望      } else if(flag == 1) {         // 卖出         ticket=OrderSend(Symbol(),OP_SELL,Lots,Bid,3,0,Bid-TakeProfit*Point,"macd sample",eventDateInt,0,Red);         if(ticket>0){            if(OrderSelect(ticket,SELECT_BY_TICKET,MODE_TRADES)) {               Print("SELL order opened : ",OrderOpenPrice());               lastActiveEvent = eventDateInt;            } else {               Print("Error opening SELL order : ",GetLastError());               return;            }         }      }      }  }//+------------------------------------------------------------------+//| ChartEvent function                                              |//+------------------------------------------------------------------+void OnChartEvent(const int id,                  const long &lparam,                  const double &dparam,                  const string &sparam)  {//---   Print("----OnChartEvent----");     }//+------------------------------------------------------------------+// 自定义函数int checkBuyTikcet(datetime eventDateTime, int eventDateInt){   int ticket = 0;   int findBuyNum =0;       if(eventDateInt == lastActiveEvent){         return 1;      }   for(int i=0;i< OrdersTotal();i++)   {      if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==true)      {         if(OrderMagicNumber() == eventDateInt){            findBuyNum++;         }         if(eventDateTime - OrderOpenTime() > MaxTradeHour * 3600){           if(OrderType() == OP_BUY){            //平仓            if(OrderClose(OrderTicket(),OrderLots(),Bid,3,Violet)){              Print("OrderClose:" + eventDateInt);            }else{              Print("OrderClose error ",GetLastError());            }            }else if(OrderType() == OP_SELL){            //平仓            if(OrderClose(OrderTicket(),OrderLots(),Ask,3,Violet)){              Print("OrderClose:" + eventDateInt);            }else{              Print("OrderClose error ",GetLastError());            }            }         }      }   }   return findBuyNum;}/*if(OrderSelect(1,SELECT_BY_POS,MODE_HISTORY)==true) //选定刚结束的订单{datetime ctm=OrderCloseTime();                //提取收盘时间int shift=iBarShift("EUROUSD",PERIOD_M15,ctm);  //计算偏移量}*/